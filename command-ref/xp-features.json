{"auto-allocate-uids":"Allows Nix to automatically pick UIDs for builds, rather than creating\n`nixbld*` user accounts. See the [`auto-allocate-uids`](@docroot@/command-ref/conf-file.md#conf-auto-allocate-uids) setting for details.\n\n\nRefer to [auto-allocate-uids tracking issue](https://github.com/NixOS/nix/milestone/34) for feature tracking.","blake3-hashes":"Enables support for BLAKE3 hashes.\n\n\nRefer to [blake3-hashes tracking issue]() for feature tracking.","ca-derivations":"Allow derivations to be content-addressed in order to prevent\nrebuilds when changes to the derivation do not result in changes to\nthe derivation's output. See\n[__contentAddressed](@docroot@/language/advanced-attributes.md#adv-attr-__contentAddressed)\nfor details.\n\n\nRefer to [ca-derivations tracking issue](https://github.com/NixOS/nix/milestone/35) for feature tracking.","cgroups":"Allows Nix to execute builds inside cgroups. See\nthe [`use-cgroups`](@docroot@/command-ref/conf-file.md#conf-use-cgroups) setting for details.\n\n\nRefer to [cgroups tracking issue](https://github.com/NixOS/nix/milestone/36) for feature tracking.","configurable-impure-env":"Allow the use of the [impure-env](@docroot@/command-ref/conf-file.md#conf-impure-env) setting.\n\n\nRefer to [configurable-impure-env tracking issue](https://github.com/NixOS/nix/milestone/37) for feature tracking.","daemon-trust-override":"Allow forcing trusting or not trusting clients with\n`nix-daemon`. This is useful for testing, but possibly also\nuseful for various experiments with `nix-daemon --stdio`\nnetworking.\n\n\nRefer to [daemon-trust-override tracking issue](https://github.com/NixOS/nix/milestone/38) for feature tracking.","dynamic-derivations":"Allow the use of a few things related to dynamic derivations:\n\n  - \"text hashing\" derivation outputs, so we can build .drv\n    files.\n\n  - dependencies in derivations on the outputs of\n    derivations that are themselves derivations outputs.\n\n\nRefer to [dynamic-derivations tracking issue](https://github.com/NixOS/nix/milestone/39) for feature tracking.","fetch-closure":"Enable the use of the [`fetchClosure`](@docroot@/language/builtins.md#builtins-fetchClosure) built-in function in the Nix language.\n\n\nRefer to [fetch-closure tracking issue](https://github.com/NixOS/nix/milestone/40) for feature tracking.","fetch-tree":"Enable the use of the [`fetchTree`](@docroot@/language/builtins.md#builtins-fetchTree) built-in function in the Nix language.\n\n`fetchTree` exposes a generic interface for fetching remote file system trees from different types of remote sources.\nThe [`flakes`](#xp-feature-flakes) feature flag always enables `fetch-tree`.\nThis built-in was previously guarded by the `flakes` experimental feature because of that overlap.\n\nEnabling just this feature serves as a \"release candidate\", allowing users to try it out in isolation.\n\n\nRefer to [fetch-tree tracking issue](https://github.com/NixOS/nix/milestone/31) for feature tracking.","flakes":"Enable flakes. See the manual entry for [`nix\nflake`](@docroot@/command-ref/new-cli/nix3-flake.md) for details.\n\n\nRefer to [flakes tracking issue](https://github.com/NixOS/nix/milestone/27) for feature tracking.","git-hashing":"Allow creating (content-addressed) store objects which are hashed via Git's hashing algorithm.\nThese store objects will not be understandable by older versions of Nix.\n\n\nRefer to [git-hashing tracking issue](https://github.com/NixOS/nix/milestone/41) for feature tracking.","impure-derivations":"Allow derivations to produce non-fixed outputs by setting the\n`__impure` derivation attribute to `true`. An impure derivation can\nhave differing outputs each time it is built.\n\nExample:\n\n```\nderivation {\n  name = \"impure\";\n  builder = /bin/sh;\n  __impure = true; # mark this derivation as impure\n  args = [ \"-c\" \"read -n 10 random < /dev/random; echo $random > $out\" ];\n  system = builtins.currentSystem;\n}\n```\n\nEach time this derivation is built, it can produce a different\noutput (as the builder outputs random bytes to `$out`).  Impure\nderivations also have access to the network, and only fixed-output\nor other impure derivations can rely on impure derivations. Finally,\nan impure derivation cannot also be\n[content-addressed](#xp-feature-ca-derivations).\n\nThis is a more explicit alternative to using [`builtins.currentTime`](@docroot@/language/builtins.md#builtins-currentTime).\n\n\nRefer to [impure-derivations tracking issue](https://github.com/NixOS/nix/milestone/42) for feature tracking.","local-overlay-store":"Allow the use of [local overlay store](@docroot@/command-ref/new-cli/nix3-help-stores.md#local-overlay-store).\n\n\nRefer to [local-overlay-store tracking issue](https://github.com/NixOS/nix/milestone/50) for feature tracking.","mounted-ssh-store":"Allow the use of the [`mounted SSH store`](@docroot@/command-ref/new-cli/nix3-help-stores.html#experimental-ssh-store-with-filesystem-mounted).\n\n\nRefer to [mounted-ssh-store tracking issue](https://github.com/NixOS/nix/milestone/43) for feature tracking.","nix-command":"Enable the new `nix` subcommands. See the manual on\n[`nix`](@docroot@/command-ref/new-cli/nix.md) for details.\n\n\nRefer to [nix-command tracking issue](https://github.com/NixOS/nix/milestone/28) for feature tracking.","no-url-literals":"Disallow unquoted URLs as part of the Nix language syntax. The Nix\nlanguage allows for URL literals, like so:\n\n```\n$ nix repl\nWelcome to Nix 2.15.0. Type :? for help.\n\nnix-repl> http://foo\n\"http://foo\"\n```\n\nBut enabling this experimental feature will cause the Nix parser to\nthrow an error when encountering a URL literal:\n\n```\n$ nix repl --extra-experimental-features 'no-url-literals'\nWelcome to Nix 2.15.0. Type :? for help.\n\nnix-repl> http://foo\nerror: URL literals are disabled\n\nat «string»:1:1:\n\n1| http://foo\n | ^\n\n```\n\nWhile this is currently an experimental feature, unquoted URLs are\nbeing deprecated and their usage is discouraged.\n\nThe reason is that, as opposed to path literals, URLs have no\nspecial properties that distinguish them from regular strings, URLs\ncontaining parameters have to be quoted anyway, and unquoted URLs\nmay confuse external tooling.\n\n\nRefer to [no-url-literals tracking issue](https://github.com/NixOS/nix/milestone/44) for feature tracking.","parse-toml-timestamps":"Allow parsing of timestamps in builtins.fromTOML.\n\n\nRefer to [parse-toml-timestamps tracking issue](https://github.com/NixOS/nix/milestone/45) for feature tracking.","pipe-operators":"Add `|>` and `<|` operators to the Nix language.\n\n\nRefer to [pipe-operators tracking issue](https://github.com/NixOS/nix/milestone/55) for feature tracking.","read-only-local-store":"Allow the use of the `read-only` parameter in [local store](@docroot@/store/types/local-store.md) URIs.\n\n\nRefer to [read-only-local-store tracking issue](https://github.com/NixOS/nix/milestone/46) for feature tracking.","recursive-nix":"Allow derivation builders to call Nix, and thus build derivations\nrecursively.\n\nExample:\n\n```\nwith import <nixpkgs> {};\n\nrunCommand \"foo\"\n  {\n     # Optional: let Nix know \"foo\" requires the experimental feature\n     requiredSystemFeatures = [ \"recursive-nix\" ];\n     buildInputs = [ nix jq ];\n     NIX_PATH = \"nixpkgs=${<nixpkgs>}\";\n  }\n  ''\n    hello=$(nix-build -E '(import <nixpkgs> {}).hello.overrideDerivation (args: { name = \"recursive-hello\"; })')\n\n    mkdir -p $out/bin\n    ln -s $hello/bin/hello $out/bin/hello\n  ''\n```\n\nAn important restriction on recursive builders is disallowing\narbitrary substitutions. For example, running\n\n```\nnix-store -r /nix/store/kmwd1hq55akdb9sc7l3finr175dajlby-hello-2.10\n```\n\nin the above `runCommand` script would be disallowed, as this could\nlead to derivations with hidden dependencies or breaking\nreproducibility by relying on the current state of the Nix store. An\nexception would be if\n`/nix/store/kmwd1hq55akdb9sc7l3finr175dajlby-hello-2.10` were\nalready in the build inputs or built by a previous recursive Nix\ncall.\n\n\nRefer to [recursive-nix tracking issue](https://github.com/NixOS/nix/milestone/47) for feature tracking.","verified-fetches":"Enables verification of git commit signatures through the [`fetchGit`](@docroot@/language/builtins.md#builtins-fetchGit) built-in.\n\n\nRefer to [verified-fetches tracking issue](https://github.com/NixOS/nix/milestone/48) for feature tracking."}
